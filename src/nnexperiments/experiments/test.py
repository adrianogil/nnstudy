from neuralnetwork import NeuralNetwork
import neuralnetwork as nnet

import perceptron


def test1():
    print('Test 1')
    nn = NeuralNetwork([2,1], [nnet.hardlim])

    input_samples = [[[0],[0]], [[0],[2]], [[2],[1]], [[3],[2]]]
    targets = [[0], [0], [1], [1]]

    perceptron.learn(nn, input_samples, targets)

def test2():
    print('Test 2')
    nn = NeuralNetwork([9,2], [nnet.logsigmoid])

    input_samples = [
                      [[0],[0],[0],
                       [0],[1],[1],
                       [0],[1],[0]
                      ],

                      [[0],[0],[0],
                       [0],[1],[1],
                       [0],[1],[1]
                      ],

                      [[0],[0],[0],
                       [1],[1],[0],
                       [0],[1],[0]
                      ],

                      [[0],[0],[0],
                       [1],[1],[0],
                       [1],[1],[0]
                      ],

                      [[0],[1],[0],
                       [0],[1],[1],
                       [0],[0],[0]
                      ],

                      [[0],[1],[1],
                       [0],[1],[1],
                       [0],[0],[0]
                      ],

                      [[0],[1],[0],
                       [1],[1],[0],
                       [0],[0],[0]
                      ],

                      [[1],[1],[0],
                       [1],[1],[0],
                       [0],[0],[0]
                      ],

                      [[1],[1],[1],
                       [1],[1],[1],
                       [1],[1],[1]
                      ],

                      [[0],[0],[0],
                       [0],[0],[0],
                       [0],[0],[0]
                      ],

                      [[1],[0],[0],
                       [1],[0],[0],
                       [1],[0],[0]
                      ],

                      [[1],[0],[1],
                       [1],[0],[1],
                       [1],[0],[1]
                      ],

                      [[1],[1],[1],
                       [0],[0],[0],
                       [1],[1],[1]
                      ],

                      [[0],[0],[0],
                       [0],[0],[0],
                       [1],[1],[1]
                      ],

                      [[1],[1],[1],
                       [0],[0],[0],
                       [0],[0],[0]
                      ],

                      [[1],[1],[1],
                       [1],[1],[1],
                       [1],[1],[1]
                      ],

                      [[1],[1],[1],
                       [1],[0],[1],
                       [1],[1],[1]
                      ],

                      [[0],[1],[0],
                       [0],[1],[0],
                       [0],[1],[0]
                      ],

                      [[0],[1],[0],
                       [1],[1],[1],
                       [0],[1],[0]
                      ],

                      [[0],[0],[0],
                       [1],[1],[1],
                       [0],[0],[0]
                      ],

                      [[0],[1],[0],
                       [0],[1],[1],
                       [0],[1],[0]
                      ],

                      [[0],[1],[0],
                       [1],[1],[0],
                       [0],[1],[0]
                      ],

                      [[0],[0],[0],
                       [1],[1],[1],
                       [0],[1],[0]
                      ],

                      [[0],[1],[0],
                       [1],[1],[1],
                       [0],[0],[0]
                      ],

                      [[1],[0],[1],
                       [0],[1],[1],
                       [1],[1],[0]
                      ],

                      [[0],[0],[1],
                       [0],[1],[1],
                       [1],[1],[1]
                      ],

                      [[1],[0],[0],
                       [1],[1],[0],
                       [0],[1],[1]
                      ],

                      [[1],[0],[0],
                       [1],[1],[0],
                       [1],[1],[1]
                      ],

                      [[1],[1],[0],
                       [0],[1],[1],
                       [0],[0],[1]
                      ],

                      [[1],[1],[1],
                       [0],[1],[1],
                       [0],[0],[1]
                      ],

                      [[0],[1],[1],
                       [1],[1],[0],
                       [1],[0],[0]
                      ],

                      [[1],[1],[1],
                       [1],[1],[0],
                       [1],[0],[0]
                      ],
                     ]

    targets = [[[1],[0]], [[1],[0]], [[1],[0]], [[1],[0]], [[1],[0]], [[1],[0]], [[1],[0]], [[1],[0]], [[1],[0]], 
      [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], 
      [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], 
      [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]], [[0],[1]]]

    perceptron.learn(nn, input_samples, targets)

    print('Weights: ' + str(nn.get_weights()))
    weights = nn.get_weights()
    for w in weights:
      for i in w:
        print(i)


# test1()
test2()